use crate::payment_gateway::mercado_pago::{Item, Payer, Shipments};
use rust_decimal::Decimal;
use wtx::collection::Vector;

/// Represents additional information about the payment.
#[derive(Debug, serde::Deserialize, serde::Serialize)]
pub struct AdditionalInfo<T> {
  /// Request's IP
  pub ip_address: Option<T>,
  /// See [Item]
  pub items: Option<Vector<Item<T>>>,
  /// See [Payer]
  pub payer: Option<Payer<T>>,
  /// See [Shipments]
  pub shipments: Option<Shipments<T>>,
}

/// Represents card details.
#[derive(Debug, serde::Deserialize, serde::Serialize)]
pub struct Card<T> {
  /// Creation date of card.
  pub date_created: Option<T>,
  /// Card expiration month.
  pub expiration_month: Option<u32>,
  /// Card expiration year.
  pub expiration_year: Option<u32>,
  /// First six digit of card number.
  pub first_six_digits: Option<T>,
  /// Card identifier.
  pub id: Option<T>,
  /// Last four digits of card number.
  pub last_four_digits: Option<T>,
}

/// Represents a payment with various attributes.
#[derive(Debug, serde::Deserialize, serde::Serialize)]
pub struct Payment<T> {
  /// Details about the resulting collection.
  pub additional_info: Option<AdditionalInfo<T>>,
  /// Acquirer.
  pub acquirer: Option<T>,
  /// Authorization code for transaction payments with "payment_method_type" of "credit_card", "debit_card", and
  /// "voucher_card".
  pub authorization_code: Option<T>,
  /// When set to TRUE, payments can only be approved or rejected. Otherwise, they can also result in "in_process".
  pub binary_mode: Option<bool>,
  /// Identifier provided to the issuing bank so that payments can be authorized.
  pub call_for_authorize_id: Option<T>,
  /// Indicates whether the payment amount has been captured or is pending capture.
  pub captured: Option<bool>,
  /// Card identifier.
  pub card: Option<Card<T>>,
  /// User who receives the money. For example, a user (payer) buys a phone on the marketplace. The identifier of
  /// the store/vendor receiving the payment is the collector_id.
  pub collector_id: Option<u64>,
  /// Essentially, an object that will allow the conversion of CBT (Cross Border Trade) payments into dollars.
  pub counter_currency: Option<T>,
  /// Coupon discount amount.
  #[serde(with = "rust_decimal::serde::float_option")]
  pub coupon_amount: Option<Decimal>,
  /// Identifier of the currency used in the payment.
  pub currency_id: Option<T>,
  /// Date of payment approval. A payment can be created in an intermediate state and later approved.
  pub date_approved: Option<T>,
  /// Date the payment was created.
  pub date_created: Option<T>,
  /// Date when the last payment event was registered.
  pub date_last_updated: Option<T>,
  /// Expiration date of the payment. The format is "yyyy-MM-dd'T'HH:mm:ssz".
  pub date_of_expiration: Option<T>,
  /// Pricing scheme applied by Mercado Pago. Represents information of a type of financing (installment plan).
  pub deduction_schema: Option<T>,
  /// Description of the purchased product, the reason for payment.
  pub description: Option<T>,
  /// Agreement on how much will be charged to the user. Pricing and fees are calculated based on this identifier.
  pub differential_pricing_id: Option<T>,
  /// External reference of the payment. Can be a hashcode from the Central Bank as transaction origin identifier.
  pub external_reference: Option<T>,
  /// Unique payment identifier, automatically generated by Mercado Pago.
  pub id: Option<u64>,
  /// Number of selected installments.
  pub installments: u8,
  /// Identifier of the card issuer being used in a credit or debit card payment.
  pub issuer_id: Option<T>,
  /// Indicates if the payment was made in a production or test environment.
  pub live_mode: Option<bool>,
  /// Identifier of merchant store code. Applies only to gateway model.
  pub merchant_account_id: Option<T>,
  /// Merchant establishment number (applies to the gateway model).
  pub merchant_number: Option<T>,
  /// Date when payment is settled and money is available in Collector's Mercado Pago account.
  pub money_release_date: Option<T>,
  /// Identifies if payment is PNF (payment in flow). Determines how installments are released over months.
  pub money_release_schema: Option<T>,
  /// URL to receive payment event notifications. Max 248 characters.
  pub notification_url: Option<T>,
  /// Indicates the type of payment.
  pub operation_type: Option<T>,
  /// Details of the payer - ID, email, identification.
  pub payer: Payer<T>,
  /// Identifier of the selected payment method.
  pub payment_method_id: Option<T>,
  /// Type of payment method (card, bank transfer, boleto, ATM, etc).
  pub payment_type_id: Option<T>,
  /// Processing mode: Aggregator (uses MP merchant codes) or Gateway (merchant's own codes).
  pub processing_mode: Option<T>,
  /// This field has been discontinued.
  pub sponsor_id: Option<T>,
  /// Description shown on card statement (e.g., MERCADOPAGO).
  pub statement_descriptor: Option<T>,
  /// Current status of the payment.
  pub status: Option<T>,
  /// Details about the resulting collection.
  pub status_detail: Option<T>,
  /// Cost of the product.
  #[serde(with = "rust_decimal::serde::float")]
  pub transaction_amount: Decimal,
  /// Amount refunded from the transaction.
  #[serde(with = "rust_decimal::serde::float_option")]
  pub transaction_amount_refunded: Option<Decimal>,
  /// Details of the transaction.
  pub transaction_details: Option<TransactionDetails<T>>,
}

/// Represents transaction details.
#[derive(Debug, serde::Deserialize, serde::Serialize)]
pub struct TransactionDetails<T> {
  /// Details of the transaction.
  pub details: Option<T>,
}

#[cfg(test)]
mod tests {
  use crate::payment_gateway::mercado_pago::Payment;

  #[test]
  fn json() {
    let _elem: Payment<&str> = serde_json::from_str(include_str!(
      "../../../assets/mercado_pago/response/payment/payment_3ds.json"
    ))
    .unwrap();
    let _elem: Payment<&str> = serde_json::from_str(include_str!(
      "../../../assets/mercado_pago/response/payment/payment_base.json"
    ))
    .unwrap();
    let _elem: Payment<&str> = serde_json::from_str(include_str!(
      "../../../assets/mercado_pago/response/payment/payment_boleto.json"
    ))
    .unwrap();
    let _elem: Payment<&str> = serde_json::from_str(include_str!(
      "../../../assets/mercado_pago/response/payment/payment_cancelled.json"
    ))
    .unwrap();
    let _elem: Payment<&str> = serde_json::from_str(include_str!(
      "../../../assets/mercado_pago/response/payment/payment_captured.json"
    ))
    .unwrap();
    let _elem: Payment<&str> = serde_json::from_str(include_str!(
      "../../../assets/mercado_pago/response/payment/payment_pix.json"
    ))
    .unwrap();
    let _elem: Payment<&str> = serde_json::from_str(include_str!(
      "../../../assets/mercado_pago/response/payment/payment_pse.json"
    ))
    .unwrap();
  }
}
